# -*- coding: utf-8 -*-
"""Regresión Lineal II

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e3jkIvAawPkPN1bh83MpSzgzTN5gjuUM
"""

import pandas as pd

df = pd.read_csv('./housing.csv')

df.head(30)

df['ocean_proximity'].value_counts()

df.info()

df.describe()

df.hist(figsize=(15,8), bins=50, edgecolor='black')

import seaborn as sb

sb.scatterplot(data=df, x='longitude', y='latitude', hue='median_house_value', palette='coolwarm')

sb.scatterplot(data=df[df['median_income'] > 14], x='longitude', y='latitude', hue='median_house_value', palette='coolwarm')

# dummies
dumies_ocean_proximty = pd.get_dummies(df['ocean_proximity'], dtype=int)

dumies_ocean_proximty

# unir los dos DF
df = pd.concat([df , dumies_ocean_proximty], axis=1)

df.head()

df.drop('ocean_proximity', axis=1, inplace=True)

df.head()

# elimina todos los registros que contengan alguna columna con un valor de null
df.dropna(inplace=True)

df.info()

df.corr()

sb.set(rc={'figure.figsize':(15,8)})
sb.heatmap(df.corr(), annot=True, cmap='YlGnBu')

df['bedroom_ratio'] = df['total_rooms'] / df['total_bedrooms']

"""## Entrenamiendo del modelo de predicción

"""

df.drop('median_house_value', axis=1)

# separar la etiqueta de las caracteristicas
# dividir el conjunto de datos en entrenamiento y pruebas
# instanciar el modelo
# hacer el entrenamiento
# hacer predicciones
# evaluar las predicciones


#separar las caracteristicas de la etiqueta

X = df.drop('median_house_value', axis=1)

y = df['median_house_value']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

y_train.shape

from sklearn.linear_model import LinearRegression

modelo = LinearRegression()

#entreno el modelo con el conjunto de entrenamiento
modelo.fit(X_train, y_train)

predicciones = modelo.predict(X_test)

info = {
    'predicciones': predicciones,
    'y_test': y_test
}

pd.DataFrame(info)

print(modelo.score(X_train, y_train))
print(modelo.score(X_test, y_test))

sb.scatterplot(df, x='median_house_value', y='median_income')

from sklearn.metrics import mean_squared_error
import numpy as np

rmse = mean_squared_error(y_test, predicciones)

print(np.sqrt(rmse))

df.describe()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.fit_transform(X_test)

pd.DataFrame(X_train_scaled)